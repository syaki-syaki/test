//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.sasakitest.graphql.adapter.GetIssuesQuery_ResponseAdapter
import com.example.sasakitest.graphql.adapter.GetIssuesQuery_VariablesAdapter
import com.example.sasakitest.graphql.selections.GetIssuesQuerySelections
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetIssuesQuery(
  public val username: String,
  public val repositoryName: String,
  public val first: Optional<Int?> = Optional.Absent,
  public val after: Optional<String?> = Optional.Absent,
) : Query<GetIssuesQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetIssuesQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetIssuesQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.sasakitest.graphql.type.Query.type
  )
  .selections(selections = GetIssuesQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetIssuesQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Lookup a given repository by the owner and repository name.
     */
    public val repository: Repository?,
  ) : Query.Data

  public data class Repository(
    /**
     * A list of issues that have been opened in the repository.
     */
    public val issues: Issues,
  )

  public data class Issues(
    /**
     * A list of nodes.
     */
    public val nodes: List<Node?>?,
  )

  public data class Node(
    /**
     * The Node ID of the Issue object
     */
    public val id: String,
    /**
     * Identifies the issue title.
     */
    public val title: String,
    /**
     * Identifies the body of the issue.
     */
    public val body: String,
    /**
     * The HTTP URL for this issue
     */
    public val url: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "9d0b8735460d3ac8ad8eace27e73d04daf90f80e9698939c806a6f4ab5d1d897"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query GetIssues($username: String!, $repositoryName: String!, $first: Int, $after: String) {
     *   repository(owner: $username, name: $repositoryName) {
     *     issues(first: $first, after: $after) {
     *       nodes {
     *         id
     *         title
     *         body
     *         url
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query GetIssues(${'$'}username: String!, ${'$'}repositoryName: String!, ${'$'}first: Int, ${'$'}after: String) { repository(owner: ${'$'}username, name: ${'$'}repositoryName) { issues(first: ${'$'}first, after: ${'$'}after) { nodes { id title body url } } } }"

    public const val OPERATION_NAME: String = "GetIssues"
  }
}
