//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.sasakitest.graphql.type.GraphQLBoolean
import com.example.sasakitest.graphql.type.GraphQLID
import com.example.sasakitest.graphql.type.GraphQLString
import com.example.sasakitest.graphql.type.PageInfo
import com.example.sasakitest.graphql.type.RepositoryOwner
import com.example.sasakitest.graphql.type.SearchResultItem
import com.example.sasakitest.graphql.type.SearchResultItemConnection
import com.example.sasakitest.graphql.type.SearchResultItemEdge
import com.example.sasakitest.graphql.type.URI
import kotlin.collections.List

public object SearchRepositoriesQuerySelections {
  private val __pageInfo: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "hasNextPage",
          type = GraphQLBoolean.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "endCursor",
          type = GraphQLString.type
        ).build()
      )

  private val __owner: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "login",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __onRepository: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "description",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "url",
          type = URI.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "owner",
          type = RepositoryOwner.type.notNull()
        ).selections(__owner)
        .build()
      )

  private val __node: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Repository",
          possibleTypes = listOf("Repository")
        ).selections(__onRepository)
        .build()
      )

  private val __edges: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "node",
          type = SearchResultItem.type
        ).selections(__node)
        .build()
      )

  private val __search: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "pageInfo",
          type = PageInfo.type.notNull()
        ).selections(__pageInfo)
        .build(),
        CompiledField.Builder(
          name = "edges",
          type = SearchResultItemEdge.type.list()
        ).selections(__edges)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "search",
          type = SearchResultItemConnection.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build(),
          CompiledArgument.Builder("query", CompiledVariable("query")).build(),
          CompiledArgument.Builder("type", "REPOSITORY").build()
        ))
        .selections(__search)
        .build()
      )
}
