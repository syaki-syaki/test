//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.sasakitest.graphql.adapter.SearchRepositoriesQuery_ResponseAdapter
import com.example.sasakitest.graphql.adapter.SearchRepositoriesQuery_VariablesAdapter
import com.example.sasakitest.graphql.selections.SearchRepositoriesQuerySelections
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class SearchRepositoriesQuery(
  public val query: String,
  public val first: Int,
  public val after: Optional<String?> = Optional.Absent,
) : Query<SearchRepositoriesQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    SearchRepositoriesQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = SearchRepositoriesQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.sasakitest.graphql.type.Query.type
  )
  .selections(selections = SearchRepositoriesQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(SearchRepositoriesQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Perform a search across resources, returning a maximum of 1,000 results.
     */
    public val search: Search,
  ) : Query.Data

  public data class Search(
    /**
     * Information to aid in pagination.
     */
    public val pageInfo: PageInfo,
    /**
     * A list of edges.
     */
    public val edges: List<Edge?>?,
  )

  public data class PageInfo(
    /**
     * When paginating forwards, are there more items?
     */
    public val hasNextPage: Boolean,
    /**
     * When paginating forwards, the cursor to continue.
     */
    public val endCursor: String?,
  )

  public data class Edge(
    /**
     * The item at the end of the edge.
     */
    public val node: Node?,
  )

  public data class Node(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Repository
     */
    public val onRepository: OnRepository?,
  )

  public data class OnRepository(
    /**
     * The Node ID of the Repository object
     */
    public val id: String,
    /**
     * The name of the repository.
     */
    public val name: String,
    /**
     * The description of the repository.
     */
    public val description: String?,
    /**
     * The HTTP URL for this repository
     */
    public val url: String,
    /**
     * The User owner of the repository.
     */
    public val owner: Owner,
  )

  public data class Owner(
    /**
     * The username used to login.
     */
    public val login: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "08fa7680b6033d6e15a43fc1a3fe858139fe576e4b3f6973c7e604cb7a369ff5"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query SearchRepositories($query: String!, $first: Int!, $after: String) {
     *   search(query: $query, type: REPOSITORY, first: $first, after: $after) {
     *     pageInfo {
     *       hasNextPage
     *       endCursor
     *     }
     *     edges {
     *       node {
     *         __typename
     *         ... on Repository {
     *           id
     *           name
     *           description
     *           url
     *           owner {
     *             login
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query SearchRepositories(${'$'}query: String!, ${'$'}first: Int!, ${'$'}after: String) { search(query: ${'$'}query, type: REPOSITORY, first: ${'$'}first, after: ${'$'}after) { pageInfo { hasNextPage endCursor } edges { node { __typename ... on Repository { id name description url owner { login } } } } } }"

    public const val OPERATION_NAME: String = "SearchRepositories"
  }
}
