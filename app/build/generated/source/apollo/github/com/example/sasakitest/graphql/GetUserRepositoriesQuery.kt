//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.sasakitest.graphql.adapter.GetUserRepositoriesQuery_ResponseAdapter
import com.example.sasakitest.graphql.adapter.GetUserRepositoriesQuery_VariablesAdapter
import com.example.sasakitest.graphql.selections.GetUserRepositoriesQuerySelections
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetUserRepositoriesQuery(
  public val username: String,
) : Query<GetUserRepositoriesQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetUserRepositoriesQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetUserRepositoriesQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.sasakitest.graphql.type.Query.type
  )
  .selections(selections = GetUserRepositoriesQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetUserRepositoriesQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Lookup a user by login.
     */
    public val user: User?,
  ) : Query.Data

  public data class User(
    /**
     * A list of repositories that the user owns.
     */
    public val repositories: Repositories,
  )

  public data class Repositories(
    /**
     * A list of nodes.
     */
    public val nodes: List<Node?>?,
  )

  public data class Node(
    /**
     * The Node ID of the Repository object
     */
    public val id: String,
    /**
     * The name of the repository.
     */
    public val name: String,
    /**
     * The HTTP URL for this repository
     */
    public val url: String,
    /**
     * The description of the repository.
     */
    public val description: String?,
    /**
     * The User owner of the repository.
     */
    public val owner: Owner,
  )

  public data class Owner(
    /**
     * The username used to login.
     */
    public val login: String,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "bf1a7188a2674d306d83a371d1c239c60d00b1d9fa416be2ea8e1e4d079530b6"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query GetUserRepositories($username: String!) {
     *   user(login: $username) {
     *     repositories(first: 10) {
     *       nodes {
     *         id
     *         name
     *         url
     *         description
     *         owner {
     *           login
     *         }
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query GetUserRepositories(${'$'}username: String!) { user(login: ${'$'}username) { repositories(first: 10) { nodes { id name url description owner { login } } } } }"

    public const val OPERATION_NAME: String = "GetUserRepositories"
  }
}
