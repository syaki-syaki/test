//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.sasakitest.graphql.type.GraphQLID
import com.example.sasakitest.graphql.type.GraphQLString
import com.example.sasakitest.graphql.type.Issue
import com.example.sasakitest.graphql.type.IssueConnection
import com.example.sasakitest.graphql.type.Repository
import com.example.sasakitest.graphql.type.URI
import kotlin.collections.List

public object GetIssuesQuerySelections {
  private val __nodes: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "title",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "body",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "url",
          type = URI.type.notNull()
        ).build()
      )

  private val __issues: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "nodes",
          type = Issue.type.list()
        ).selections(__nodes)
        .build()
      )

  private val __repository: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "issues",
          type = IssueConnection.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder("after", CompiledVariable("after")).build(),
          CompiledArgument.Builder("first", CompiledVariable("first")).build()
        ))
        .selections(__issues)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "repository",
          type = Repository.type
        ).arguments(listOf(
          CompiledArgument.Builder("name", CompiledVariable("repositoryName")).build(),
          CompiledArgument.Builder("owner", CompiledVariable("username")).build()
        ))
        .selections(__repository)
        .build()
      )
}
