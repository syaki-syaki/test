//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.sasakitest.graphql.SearchRepositoriesQuery
import com.example.sasakitest.graphql.type.URI
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object SearchRepositoriesQuery_ResponseAdapter {
  public object Data : Adapter<SearchRepositoriesQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.Data {
      var _search: SearchRepositoriesQuery.Search? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.Data(
        search = _search!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.Data,
    ): Unit {
      writer.name("search")
      Search.obj().toJson(writer, customScalarAdapters, value.search)
    }
  }

  public object Search : Adapter<SearchRepositoriesQuery.Search> {
    public val RESPONSE_NAMES: List<String> = listOf("pageInfo", "edges")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.Search {
      var _pageInfo: SearchRepositoriesQuery.PageInfo? = null
      var _edges: List<SearchRepositoriesQuery.Edge?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _pageInfo = PageInfo.obj().fromJson(reader, customScalarAdapters)
          1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.Search(
        pageInfo = _pageInfo!!,
        edges = _edges
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.Search,
    ): Unit {
      writer.name("pageInfo")
      PageInfo.obj().toJson(writer, customScalarAdapters, value.pageInfo)

      writer.name("edges")
      Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
    }
  }

  public object PageInfo : Adapter<SearchRepositoriesQuery.PageInfo> {
    public val RESPONSE_NAMES: List<String> = listOf("hasNextPage", "endCursor")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.PageInfo {
      var _hasNextPage: Boolean? = null
      var _endCursor: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hasNextPage = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _endCursor = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.PageInfo(
        hasNextPage = _hasNextPage!!,
        endCursor = _endCursor
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.PageInfo,
    ): Unit {
      writer.name("hasNextPage")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.hasNextPage)

      writer.name("endCursor")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.endCursor)
    }
  }

  public object Edge : Adapter<SearchRepositoriesQuery.Edge> {
    public val RESPONSE_NAMES: List<String> = listOf("node")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.Edge {
      var _node: SearchRepositoriesQuery.Node? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _node = Node.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.Edge(
        node = _node
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.Edge,
    ): Unit {
      writer.name("node")
      Node.obj(true).nullable().toJson(writer, customScalarAdapters, value.node)
    }
  }

  public object Node : Adapter<SearchRepositoriesQuery.Node> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.Node {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onRepository: SearchRepositoriesQuery.OnRepository? = null
      if (possibleTypes("Repository").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onRepository = com.example.sasakitest.graphql.adapter.SearchRepositoriesQuery_ResponseAdapter.OnRepository.fromJson(reader,
            customScalarAdapters)
      }

      return SearchRepositoriesQuery.Node(
        __typename = __typename,
        onRepository = _onRepository
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.Node,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onRepository != null) {
        com.example.sasakitest.graphql.adapter.SearchRepositoriesQuery_ResponseAdapter.OnRepository.toJson(writer,
            customScalarAdapters, value.onRepository)
      }
    }
  }

  public object OnRepository : Adapter<SearchRepositoriesQuery.OnRepository> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "description", "url", "owner")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.OnRepository {
      var _id: String? = null
      var _name: String? = null
      var _description: String? = null
      var _url: String? = null
      var _owner: SearchRepositoriesQuery.Owner? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _description = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _url = customScalarAdapters.responseAdapterFor<String>(URI.type).fromJson(reader,
              customScalarAdapters)
          4 -> _owner = Owner.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.OnRepository(
        id = _id!!,
        name = _name!!,
        description = _description,
        url = _url!!,
        owner = _owner!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.OnRepository,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("description")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("url")
      customScalarAdapters.responseAdapterFor<String>(URI.type).toJson(writer, customScalarAdapters,
          value.url)

      writer.name("owner")
      Owner.obj().toJson(writer, customScalarAdapters, value.owner)
    }
  }

  public object Owner : Adapter<SearchRepositoriesQuery.Owner> {
    public val RESPONSE_NAMES: List<String> = listOf("login")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SearchRepositoriesQuery.Owner {
      var _login: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _login = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SearchRepositoriesQuery.Owner(
        login = _login!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SearchRepositoriesQuery.Owner,
    ): Unit {
      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)
    }
  }
}
