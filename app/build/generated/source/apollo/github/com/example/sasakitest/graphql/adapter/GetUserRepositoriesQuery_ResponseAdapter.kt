//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.example.sasakitest.graphql.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.sasakitest.graphql.GetUserRepositoriesQuery
import com.example.sasakitest.graphql.type.URI
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetUserRepositoriesQuery_ResponseAdapter {
  public object Data : Adapter<GetUserRepositoriesQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("user")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserRepositoriesQuery.Data {
      var _user: GetUserRepositoriesQuery.User? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _user = User.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserRepositoriesQuery.Data(
        user = _user
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserRepositoriesQuery.Data,
    ): Unit {
      writer.name("user")
      User.obj().nullable().toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object User : Adapter<GetUserRepositoriesQuery.User> {
    public val RESPONSE_NAMES: List<String> = listOf("repositories")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserRepositoriesQuery.User {
      var _repositories: GetUserRepositoriesQuery.Repositories? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _repositories = Repositories.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserRepositoriesQuery.User(
        repositories = _repositories!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserRepositoriesQuery.User,
    ): Unit {
      writer.name("repositories")
      Repositories.obj().toJson(writer, customScalarAdapters, value.repositories)
    }
  }

  public object Repositories : Adapter<GetUserRepositoriesQuery.Repositories> {
    public val RESPONSE_NAMES: List<String> = listOf("nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserRepositoriesQuery.Repositories {
      var _nodes: List<GetUserRepositoriesQuery.Node?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _nodes = Node.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return GetUserRepositoriesQuery.Repositories(
        nodes = _nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserRepositoriesQuery.Repositories,
    ): Unit {
      writer.name("nodes")
      Node.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node : Adapter<GetUserRepositoriesQuery.Node> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "url", "description", "owner")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserRepositoriesQuery.Node {
      var _id: String? = null
      var _name: String? = null
      var _url: String? = null
      var _description: String? = null
      var _owner: GetUserRepositoriesQuery.Owner? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _url = customScalarAdapters.responseAdapterFor<String>(URI.type).fromJson(reader,
              customScalarAdapters)
          3 -> _description = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _owner = Owner.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserRepositoriesQuery.Node(
        id = _id!!,
        name = _name!!,
        url = _url!!,
        description = _description,
        owner = _owner!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserRepositoriesQuery.Node,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("url")
      customScalarAdapters.responseAdapterFor<String>(URI.type).toJson(writer, customScalarAdapters,
          value.url)

      writer.name("description")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("owner")
      Owner.obj().toJson(writer, customScalarAdapters, value.owner)
    }
  }

  public object Owner : Adapter<GetUserRepositoriesQuery.Owner> {
    public val RESPONSE_NAMES: List<String> = listOf("login")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserRepositoriesQuery.Owner {
      var _login: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _login = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserRepositoriesQuery.Owner(
        login = _login!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserRepositoriesQuery.Owner,
    ): Unit {
      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)
    }
  }
}
